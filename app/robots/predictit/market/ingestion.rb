module Predictit::Market::Ingestion
  def ingest!
    self.market = find_or_create_market!
    create_or_update_outcomes
    update_odds
  end

  private

    def find_or_create_market!
      market_scope.first_or_create! do |m|
        m.assign_attributes(ticker_base: "PREDICTIT_#{ticker}",
                            external_url: blob['URL'],
                            close_date: close_date,
                            title: title,
                            market_type: market_type,
                            rules: 'autogenerated, please update')
      end
    end

    # TODO: propose new outcomes
    def create_or_update_outcomes
      return unless market.needs_outcomes?
      return unless market.categorical?
      create_categorical_outcomes
    end

    def create_categorical_outcomes
      blob['Contracts'].each do |c|
        attrs = { title: c['LongName'],
                  short_title: c['Name'],
                  external_id: c['ID'],
                  ticker_base: outcome_ticker(c) }
        market.market_outcomes.category.create!(attrs)
      end
    end

    def update_odds
      return unless market.needs_odds_update?
      update_categorical_odds if market.categorical?
      update_binary_odds if market.binary?
    end

    def update_categorical_odds
      market.market_outcomes.each do |outcome|
        next unless outcome.external_id
        mc = blob['Contracts'].find { |c| c['ID'] == outcome.external_id.to_i }
        next unless mc
        outcome.update_attribute(:odds, mc['BestBuyYesCost'])
      end
    end

    def update_binary_odds
      return unless yes_odds
      market.market_outcomes.where(outcome_type: 'yes').first.update_attributes(odds: yes_odds)
      market.market_outcomes.where(outcome_type: 'no').first.update_attributes(odds: 1.0 - yes_odds)
    end

    def outcome_ticker(c)
      c['TickerSymbol'].sub(".#{blob['TickerSymbol']}", '')
    end
end
